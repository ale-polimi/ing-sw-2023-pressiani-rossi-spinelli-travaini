package model.library;

import enumerations.ObjectColour;
import model.objects.ObjectCard;

public class Library extends LibraryGrid {

    /**
     * Custom constructor to initialize an empty library. Needed for the {@link view.cli.Cli CLI}.
     */
    public Library() {
        for(int row = 0; row < 6; row++){
            for(int col = 0; col < 5; col++){
                this.getLibrarySpace(row,col).putObject(new ObjectCard(ObjectColour.EMPTY));
            }
        }
    }

    /**
     * This method will add an object in the selected library space.
     * @param objectCard is the object card that will be added to the library.
     * @param librarySpace is the library space that will contain the object card.
     */
    public void addObject(ObjectCard objectCard, LibrarySpace librarySpace){
        librarySpace.putObject(objectCard);
    }

    /**
     * Getter method to return the object contained in a library space of this library.
     * @param librarySpace is the desired library space of this library.
     * @return the object contained in this library space using the {@link LibrarySpace#getObject() getObject() method} of the library space.
     */
    public ObjectCard getObject(LibrarySpace librarySpace){
        return librarySpace.getObject();
    }

    /**
     * This method will return the library space at the desired coordinates.
     * @param x is the X coordinate of the library.
     * @param y is the Y coordinate of the library.
     * @return the selected library space of this library.
     */
    public LibrarySpace getLibrarySpace(int x, int y){
            return libraryGrid[x][y];
    }

    /**
     * Calculate the points generated by the tiles in the library
     * @return the amount of points earned
     */
    public int getLibraryPoints(){
        int libraryPoints = 0;
        for(int i = 0; i < 6; i++){
            for(int j = 0 ; j < 5; j++){
                int count = 0;
                if(!getLibrarySpace(i,j).getObject().getObjectColour().isEquals(ObjectColour.EMPTY) && !getLibrarySpace(i,j).isVisited()){
                    count += sameColour(i,j,getLibrarySpace(i,j).getObject().getObjectColour());
                    switch(count){
                        case  0,1,2 ->{
                            //Empty as these cases don't give points
                        }
                        case 3 -> {libraryPoints += 2;}
                        case 4 -> {libraryPoints += 3;}
                        case 5 -> {libraryPoints += 5;}
                        case 6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-> { libraryPoints += 8;}
                    }
                    count = 0;
                }
                getLibrarySpace(i,j).setVisited(true);
            }
        }

        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 5; j++) {
                getLibrarySpace(i,j).setVisited(false);
            }
        }
        return libraryPoints;
    }

    /**
     * Method used to calculate the number of adjacent tiles that have the same colour
     * @param x Represent the X coordinate
     * @param y Represent the Y coordinate
     * @param objectColour is the colour we want to check
     * @return the number of adjacent cell with the specified colour
     */
    private  int sameColour(int x, int y, ObjectColour objectColour){
        if(!objectColour.isEquals(ObjectColour.EMPTY) && !getLibrarySpace(x,y).isVisited() && getLibrarySpace(x,y).getObject().getObjectColour().isEquals(objectColour)&&getLibrarySpace(x,y).getObject()!=null){
            getLibrarySpace(x,y).setVisited(true);
            int returnValue = 0;
            if (x!=0) returnValue+= sameColour(x - 1, y, objectColour);
            if (x!=5) returnValue+=sameColour(x + 1, y, objectColour);
            if (y!=0)returnValue+= sameColour(x, y - 1, objectColour);
            if (y!=4)returnValue+=sameColour(x, y + 1, objectColour);
            return 1 + returnValue;
        }
        return 0;
    }

}
